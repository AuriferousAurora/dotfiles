#!/usr/bin/env pwsh
[CmdletBinding()]
param (
    [Parameter()]
    [String[]]
    $Team = @('cloud-services-admin','iac-kubernetes-admin'),

    [Parameter()]
    [String]
    $File = "~/91308_github.pem"
)

if (-Not $env:GITHUB_TOKEN -and (Test-Path ~/.config/gh/hosts.yml)) {
  $env:GITHUB_TOKEN = (Get-Content ~/.config/gh/hosts.yml | ConvertFrom-Yaml).'github.com'.oauth_token
}
$headers = @{ Authorization = "token $($env:GITHUB_TOKEN)"; Accept = 'application/vnd.github.v3+json' }

Write-Host "Looking for repos with the GH_APP_KEY secret"
$repos = ($Team | %{
  $uri = "https://api.github.com/orgs/Equifax/teams/$_/repos"
  do {
    # Use Invoke-Web-Request so paging can be used
    $result = Invoke-WebRequest -Headers $headers -Uri $uri -ErrorAction:SilentlyContinue
    $result.Content | ConvertFrom-Json | %{ $_.full_name } | %{
      $repo = $_
      $uri = "https://api.github.com/repos/$repo/actions/secrets"
      Invoke-RestMethod -Headers $headers -Uri $uri -ErrorAction:SilentlyContinue | %{ $_.secrets.name } | ?{ $_ -eq 'GH_APP_KEY' } | %{
        $repo
      }
    }
    $uri = $result.RelationLink.next
  } while($uri)
} | Sort-Object | Get-Unique)

$secret = Get-Content $File -Raw
$repos | %{
  $repo = $_
  Write-Host $_
  # Use the command line since we don't have access the sodium library for encryption
  $secret | gh secret set GH_APP_KEY --repo $repo
}
