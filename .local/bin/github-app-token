#!/usr/bin/env pwsh
param (
    [Parameter(Mandatory)]
    [int] $GitHubAppId,
    [Parameter(Mandatory)]
    [String] $GitHubAppKeyPath
)

function Base64UrlEncodeBytes([Byte[]] $bytes) {
    [Convert]::ToBase64String($bytes) -replace '\+', '-' -replace '/', '_' -replace '='
}
  
function Base64UrlEncodeJson([Object] $object) {
    Base64UrlEncodeBytes([System.Text.Encoding]::UTF8.GetBytes(($object | ConvertTo-Json -Compress)))
}
  
# https://docs.github.com/en/developers/apps/building-github-apps/authenticating-with-github-apps
# https://www.jerriepelser.com/blog/obtain-access-token-github-app-webhook/
$GitHubAppKey = (Get-Content $GitHubAppKeyPath | Where-Object { $_ -notmatch '----' }) -join ''
$rsa = [System.Security.Cryptography.RSA]::Create()
[int]$bytesRead = 0
$rsa.ImportRSAPrivateKey([Convert]::FromBase64String($GitHubAppKey), [ref]$bytesRead)

$header = Base64UrlEncodeJson(@{alg = 'RS256'; typ = 'JWT' })
$payload = Base64UrlEncodeJson(@{iat = [DateTimeOffset]::Now.ToUnixTimeSeconds(); exp = [DateTimeOffset]::Now.AddSeconds(600).ToUnixTimeSeconds(); iss = $GitHubAppId })
$signature = Base64UrlEncodeBytes($rsa.SignData([System.Text.Encoding]::UTF8.GetBytes("$header.$payload"), [Security.Cryptography.HashAlgorithmName]::SHA256, [Security.Cryptography.RSASignaturePadding]::Pkcs1))
$jwt = "$header.$payload.$signature"

$headers = @{ Authorization = "Bearer $jwt"; Accept = 'application/vnd.github.machine-man-preview+json' }
$access_tokens_url = (Invoke-RestMethod -Headers $headers "https://api.github.com/app/installations" -SkipHttpErrorCheck).access_tokens_url
if (-Not $access_tokens_url) {
    throw "Unable to get GitHub access token url for $GitHubAppId (has GitHubAppKey expired?)"
}
$token = (Invoke-RestMethod -Headers $headers -Method Post $access_tokens_url -Verbose:$VerbosePreference).token
if (-Not $token) {
    throw "Unable to get GitHub access token for $GitHubAppId (has GitHubAppKey expired?)"
}
Write-Output $token