#!/usr/bin/env pwsh
param (
    [string] $GitHubAppId = $ENV:GITHUB_APP_ID,
    [String] $GitHubAppKey = $ENV:GITHUB_APP_KEY
)

function Base64UrlEncodeBytes([Byte[]] $bytes) {
    [Convert]::ToBase64String($bytes) -replace '\+', '-' -replace '/', '_' -replace '='
}
  
function Base64UrlEncodeJson([Object] $object) {
    Base64UrlEncodeBytes([System.Text.Encoding]::UTF8.GetBytes(($object | ConvertTo-Json -Compress)))
}

try {
    # https://docs.github.com/en/developers/apps/building-github-apps/authenticating-with-github-apps
    # https://www.jerriepelser.com/blog/obtain-access-token-github-app-webhook/
    # Remove newline characters and the cert header/footers (-----BEGIN RSA PRIVATE KEY-----)
    $KeyData = ($GitHubAppKey -replace '\n', '') -replace '-+[A-Z ]+-+', ''

    $rsa = [System.Security.Cryptography.RSA]::Create()
    [int]$bytesRead = 0
    $rsa.ImportRSAPrivateKey([Convert]::FromBase64String($KeyData), [ref]$bytesRead)

    $header = Base64UrlEncodeJson(@{alg = 'RS256'; typ = 'JWT' })
    $payload = Base64UrlEncodeJson(@{iat = [DateTimeOffset]::Now.ToUnixTimeSeconds() - 60; exp = [DateTimeOffset]::Now.AddSeconds(500).ToUnixTimeSeconds(); iss = [int]$GitHubAppId })
    $signature = Base64UrlEncodeBytes($rsa.SignData([System.Text.Encoding]::UTF8.GetBytes("$header.$payload"), [Security.Cryptography.HashAlgorithmName]::SHA256, [Security.Cryptography.RSASignaturePadding]::Pkcs1))
    $jwt = "$header.$payload.$signature"

    $headers = @{ Authorization = "Bearer $jwt"; Accept = 'application/vnd.github.machine-man-preview+json' }
    $response = Invoke-RestMethod -Headers $headers "https://api.github.com/app/installations" -SkipHttpErrorCheck
    $access_tokens_url = $response.access_tokens_url
    if (-Not $access_tokens_url) {
        throw "Unable to get GitHub access token url for $GitHubAppId (has GitHubAppKey expired?): $response"
    }
    $response = Invoke-RestMethod -Headers $headers -Method Post $access_tokens_url -Verbose:$VerbosePreference
    $token = $response.token
    if (-Not $token) {
        throw "Unable to get GitHub access token for $GitHubAppId (has GitHubAppKey expired?): $response"
    }
    Write-Output $token
}
catch {
    Write-Error "GitHubAppId = $GitHubAppId"
    Write-Error "GitHubAppKey = $GitHubAppKey"
    Write-Error $_
    exit 1
}