#!/usr/bin/env pwsh
Param (
    [string]$BranchName,
    [switch]$AllRemoteBranches
)

Import-Module posh-git

function Merge-FromGitBranch {
    Param (
        [Parameter(Mandatory = $true)]
        [string]$BranchName
    )

    # Is there a way to figure out if a merge is needed?

    $current_branch = (Get-GitStatus).Branch
    $merge_base = git merge-base FETCH_HEAD $BranchName
    $merge_results = git merge-tree $merge_base $BranchName FETCH_HEAD
    if ($merge_results) {
        $conflict = $merge_results | Where-Object { $_ -match '^+<* \.our$' }

        if ($conflict) {
            Write-Warning "There are merge conflict merging $BranchName to $current_branch"
            exit
        }
    }

    $message = "Merging $BranchName to $current_branch"
    Write-Host -ForegroundColor Green $message
    git merge $BranchName -m "$message"

    $status = Get-GitStatus
    if ($status.AheadBy -gt 0) {
        Write-Host -ForegroundColor Green "Pushing merge changes to origin/$current_branch"
        git push
    }
}

git fetch && git fetch origin

$status = Get-GitStatus
$current_branch = $status.Branch

if ($status.HasWorking -or $status.HasUntracked) {
    Write-Warning "There are uncommited changes in $current_branch"
    exit
}

if ($status.BehindBy -gt 0) {
    Write-Host -ForegroundColor Green "Pulling upstream changes to $current_branch"
    git pull
}


$status = Get-GitStatus
if ($status.AheadBy -gt 0) {
    Write-Host -ForegroundColor Green "Pushing changes to origin/$current_branch"
    git push
}

$RemoteBranches = git branch --remotes --list --format='%(refname:short)' | Where-Object { $_ -match 'origin\/' } | ForEach-Object { $_.Replace('origin/', '') }

if ($AllRemoteBranches) {
    $Branches = $RemoteBranches | Where-Object { $_ -ne $current_branch }
}
else {
    $Branches = $BranchName -split ',' | ForEach-Object { $_.Trim() }
    # Verify that all of the specified branches exist
    $Branches | ForEach-Object {
        if (-not $RemoteBranches.Contains($_)) {
            Write-Warning "Branch $_ does not exist"
            exit
        }
    }
}

$Branches | ForEach-Object {
    $BranchName = $_

    Write-Host -ForegroundColor Cyan "====================================="
    Write-Host -ForegroundColor Cyan "Start processing branch $BranchName"

    git checkout $BranchName
    $status = Get-GitStatus
    if ($status.HasWorking -or $status.HasUntracked) {
        Write-Warning "There are uncommited changes in $BranchName"
        exit
    }
  
    if ($status.BehindBy -gt 0) {
        Write-Host -ForegroundColor Green "Pulling upstream changes to $BranchName"
        git pull
    }

    $status = Get-GitStatus
    if ($status.BehindBy -gt 0) {
        Write-Host -ForegroundColor Green "Pushing changes to origin/$BranchName"
        git push
    }

    Merge-FromGitBranch $current_branch
  
    git checkout $current_branch
    Write-Host -ForegroundColor Cyan "====================================="
    Write-Host ""
}
