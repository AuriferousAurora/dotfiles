#!/bin/pwsh
Param (
  [Parameter(Mandatory = $true)]
  [string]$BranchName
)

function OpenBranch {
  Param (
    [Parameter(Mandatory = $true)]
    [string]$BranchName
  )

  $owner, $repo = $(([Uri]$(git remote get-url origin)).PathAndQuery | Select-String -Pattern '/(.*)/(.*).git').Matches.Groups | ? Name -NE 0 | % Value

  $token = (Get-Content ~/.config/gh/hosts.yml | ConvertFrom-Yaml).'github.com'.oauth_token
  $headers = @{ Authorization = "token $token" }

  $protection = @{
    restrictions                  = @{
      users = @()
      teams = @()
      apps  = @()
    }
    required_pull_request_reviews = @{
      dismiss_stale_reviews      = $true
      require_code_owner_reviews = $true
      dismissal_restrictions     = @{
        users = @()
        teams = @()
      }
    }
    enforce_admins                = $false
    required_status_checks        = $null
  }

  (Invoke-RestMethod -Headers $headers "https://api.github.com/repos/$owner/$repo/branches").where{ $_.protected -eq $True -and $_.name -eq $BranchName } | % {
    Write-Host "Opening $BranchName branch for $owner/$repo"
    Invoke-RestMethod -Headers $headers -Method Put -Body ($protection | ConvertTo-Json -Depth 10) "https://api.github.com/repos/$owner/$repo/branches/$BranchName/protection" | Out-Null
  }
}

$current_branch = git branch --show-current

if (git status --porcelain --untracked-files) {
  Write-Warning "There are uncommited changes in $current_branch"
  exit
}

git fetch && git fetch origin $BranchName && git pull

$current_commit = git rev-parse --verify $current_branch
$remote_current_commit = git rev-parse --verify origin/$current_branch
if ($current_commit -ne $remote_current_commit) {
  OpenBranch $current_branch
  Write-Host -ForegroundColor Green "Pushing changes to origin/$current_branch"
  git push
}

$merge_base = git merge-base FETCH_HEAD $BranchName
$merge_results = git merge-tree $merge_base $BranchName FETCH_HEAD
if ($merge_results) {
  $conflict = $merge_results | ?{ $_ -match '^+<* \.our$' }

  if ($conflict) {
    Write-Warning "There are merge conflict merging $current_branch to $BranchName"
    exit
  }

  $message = "Merging $BranchName to $current_branch"
  Write-Host -ForegroundColor Green $message
  git merge $BranchName -m "$message"
  OpenBranch $current_branch
  git push
}

git checkout $BranchName

if (git status --porcelain --untracked-files) {
  Write-Warning "There are uncommited changes in $BranchName"
  exit
}

$current_commit = git rev-parse --verify $BranchName
$remote_current_commit = git rev-parse --verify origin/$BranchName
if ($current_commit -ne $remote_current_commit) {
  Write-Host -ForegroundColor Green "Pulling changes from $BranchName"
  git pull
}

$merge_base = git merge-base FETCH_HEAD $current_branch
$merge_results = git merge-tree $merge_base $current_branch FETCH_HEAD

if ($merge_results) {
  $conflict = $merge_results | ?{ $_ -match '^+<* \.our$' }

  if ($conflict) {
    Write-Warning "There are merge conflict merging $BranchName to $current_branch"
    exit
  }
}

# Is there a way to figure out if a merge is needed
git merge $current_branch -m "Merging $current_branch to $BranchName"

$current_commit = git rev-parse --verify $BranchName
$remote_current_commit = git rev-parse --verify origin/$BranchName
if ($current_commit -ne $remote_current_commit) {
  OpenBranch $BranchName
  git push
}

git checkout $current_branch

$merge_base = git merge-base FETCH_HEAD $BranchName
$merge_results = git merge-tree $merge_base $BranchName FETCH_HEAD
if ($merge_results) {
  $conflict = $merge_results | ?{ $_ -match '^+<* \.our$' }

  if ($conflict) {
    Write-Warning "There are merge conflict merging $current_branch to $BranchName"
    exit
  }
}

git merge $BranchName -m "Merging $BranchName to $current_branch"

$current_commit = git rev-parse --verify $current_branch
$remote_current_commit = git rev-parse --verify origin/$current_branch
if ($current_commit -ne $remote_current_commit) {
  OpenBranch $current_branch
  git push
}