#!/usr/bin/env pwsh
[CmdletBinding()]
param (
    [Parameter()]
    [String]
    $Name
)

if ($env:APPDATA) {
  $token = (Get-Content "$($env:APPDATA)/GitHub CLI/hosts.yml" | ConvertFrom-Yaml).'github.com'.oauth_token
} elseif ($env:HOME) {
  $token = (Get-Content "$($env:HOME)/.config/gh/hosts.yml" | ConvertFrom-Yaml).'github.com'.oauth_token
} else {
  throw "Unable to locate GitHub token, try gh auth login"
}
$headers = @{ Authorization = "token $token" }

if (-Not $Name) {
  $path = Get-Location
  $Name = $path | Split-Path -Leaf
  Write-Host "Name parameter not specified, using -Name $Name"
}
else {
  $path = Join-Path (Get-Location) $Name
}

if (-Not (Test-Path $path)) {
  throw "$path does not exist"
}

Push-Location $path
try {
  # Make sure code is checked in
  $status = Get-GitStatus
  if (-Not $status) {
    throw "No git repository found at $path"
  }

  if ($status.HasUntracked) {
    throw "Repository has uncommited files.  Please make sure the local repository is up to date before coping a remote repo"
  }

  $remote = git remote 2>$null | Select-Object -First 1
  if (-Not $remote) {
    throw "Not an existing GitHub repo"
  }
  $remote_url = git remote get-url $remote 2>$null
  $owner,$repo_name = $(([Uri]$remote_url).PathAndQuery | Select-String -Pattern '\/([^\/]*)\/([^\/\.]*)').Matches.Groups | ? Name -ne 0 | % Value
  $default_branch = (Invoke-RestMethod -Headers $headers "https://api.github.com/repos/$owner/$repo_name").default_branch

  git checkout $default_branch
  git fetch --prune --prune-tags --force
  git pull --tags origin --rebase
  $local_branches = $(git for-each-ref --format='%(refname:short)' refs/heads)
  $remove_branches = $(git for-each-ref --format='%(refname:short)' refs/remotes/origin) | %{ $_ -replace '^origin/','' }
  $local_branches | ?{ $_ -notin $remove_branches } | %{
    git branch -D $_
  }

  $repo = Invoke-RestMethod -Headers $headers  "https://api.github.com/repos/RobCannon/$repo_name" -SkipHttpErrorCheck
  if ($repo.name -ne $repo_name) {
    Write-Host "Creating RobCannon/$repo_name"
    gh repo create RobCannon/$repo_name --private --push --remote RobCannon --source .
  }
  else {
    Write-Host "Repo RobCannon/$repo_name already exists, updating"
    git remote add RobCannon "https://github.com/RobCannon/$repo_name"
  }

  git push --set-upstream RobCannon $default_branch
  git push -f --mirror RobCannon

  Write-Host "Restoring remote $remote to $remote_url"
  git remote remove RobCannon
  git branch --set-upstream-to=origin/$default_branch $default_branch
}
catch {
  Write-Error $_
  exit 1
}
finally {
  Pop-Location
}