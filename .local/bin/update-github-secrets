#!/usr/bin/env pwsh
[CmdletBinding()]
param (
    [Parameter()]
    [String[]]
    $Team = @('cloud-services-admin','iac-kubernetes-admin'),

    [Parameter()]
    [String]
    $File = "~/91308_github.pem",

    [Parameter()]
    [String]
    $AppId = "91308"
)

if ($env:APPDATA) {
  $token = (Get-Content "$($env:APPDATA)/GitHub CLI/hosts.yml" | ConvertFrom-Yaml).'github.com'.oauth_token
} elseif ($env:HOME) {
  $token = (Get-Content "$($env:HOME)/.config/gh/hosts.yml" | ConvertFrom-Yaml).'github.com'.oauth_token
} else {
  throw "Unable to locate GitHub token, try gh auth login"
}
$headers = @{ Authorization = "token $token"; Accept = 'application/vnd.github.v3+json' }


function Get-ReposWithSecret
{
  param (
      [Parameter()]
      [String[]]
      $Team,

      [Parameter()]
      [String]
      $SecretName,

      [Parameter()]
      [Hashtable]
      $Headers
  )

  Write-Host -ForegroundColor Green "Looking for repos with the $SecretName secret"
  ($Team | %{
    $uri = "https://api.github.com/orgs/AccelerateLearning/teams/$_/repos"
    do {
      # Use Invoke-Web-Request so paging can be used
      $ProgressPreference = 'SilentlyContinue'
      $result = Invoke-WebRequest -Headers $headers -Uri $uri -ErrorAction:SilentlyContinue
      $result.Content | ConvertFrom-Json | %{ $_.full_name } | %{
        $repo = $_
        $uri = "https://api.github.com/repos/$repo/actions/secrets"
        Invoke-RestMethod -Headers $headers -Uri $uri -ErrorAction:SilentlyContinue | %{ $_.secrets.name } | ?{ $_ -eq $SecretName } | %{
          $repo
        }
      }
      $uri = $result.RelationLink.next
    } while($uri)
  } | Sort-Object | Get-Unique)
}

$secret = Get-Content $File -Raw
$secrets = Get-Content ~/secrets.json | ConvertFrom-Json

Get-ReposWithSecret -Team $Team -SecretName 'GH_APP_KEY' -Headers $Headers | %{
  $repo = $_
  Write-Host -ForegroundColor Cyan "Updating GH_APP_KEY/GH_APP_ID secrets in $_"
  # Use the command line since we don't have access the sodium library for encryption
  gh secret set GH_APP_KEY --repo $repo --body "$secret"
  gh secret set GH_APP_ID --repo $repo --body "$AppId"
}

Get-ReposWithSecret -Team $Team -SecretName 'TWISTLOCK_USER' -Headers $Headers | %{
  $repo = $_
  Write-Host -ForegroundColor Cyan "Updating TWISTLOCK_USER/TWISTLOCK_PWD secrets in $_"
  # Use the command line since we don't have access the sodium library for encryption
  gh secret set TWISTLOCK_USER --repo $repo --body "$($secrets.TWISTLOCK_USER)"
  gh secret set TWISTLOCK_PWD --repo $repo --body "$($secrets.TWISTLOCK_PWD)"
}

Get-ReposWithSecret -Team $Team -SecretName 'QUALYS_USER' -Headers $Headers | %{
  $repo = $_
  Write-Host -ForegroundColor Cyan "Updating QUALYS_USER/QUALYS_PWD secrets in $_"
  # Use the command line since we don't have access the sodium library for encryption
  gh secret set QUALYS_USER --repo $repo --body "$($secrets.QUALYS_USER)"
  gh secret set QUALYS_PWD --repo $repo --body "$($secrets.QUALYS_PWD)"
}
